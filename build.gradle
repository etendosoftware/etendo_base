/**
 * Gradle for openbravo projects.
 *
 * @author: androettop
 */

/**
 * PROJECT CONFIGURATIONS
 */

plugins {
    id 'maven-publish'
    id 'java'
    id 'war'
}

sourceSets{
    main{
        java{
            outputDir = file("$buildDir/classes/")
            srcDirs = ['build/javasqlc/src'] //clean the default sources directories.
            srcDirs 'build/javasqlc/srcAD'
            srcDirs 'src'
            srcDirs 'src-gen'
            srcDirs 'srcAD'
        }
    }
}
//set the modules sources directories.
if(file('modules').exists() && file('modules').isDirectory()){
    file('modules').eachDir {
        sourceSets.main.java.srcDirs += it.toString()+"/src"
    }
}

configurations {
    coreDep
    moduleDeps
}
/**
 * DEPENDENCIES
 */
dependencies {
    coreDep 'com.smf.classic.core:ob:[20.1.2,)@zip'
    moduleDeps 'com.smf:smartclient.debugtools:[1.0.1,)@zip'
    moduleDeps 'com.smf:smartclient.boostedui:[1.0.0,)@zip'
    moduleDeps 'com.smf:securewebservices:[1.1.1,)@zip'

    // hack to load jar dependencies.
    implementation fileTree(project.projectDir) {
        include "**/lib/**/*.jar"
        exclude "\${env.CATALINA_HOME}"
        exclude "WebContent"
    }
}

/**
 * REPOSITORIES CONFIGURATIONS
 * (Configure credentials in gradle.properties inside GRADLE_USER_HOME (default: ~/.gradle))
 */

repositories {
    jcenter()
    maven {
        url "https://repo.futit.cloud/repository/maven-releases"
        credentials {
            username "$mavenUser"
            password "$mavenPassword"
        }
    }
}

/**
 * BUILD TASKS
 */

/** map from ant tasks to gradle*/
ant.importBuild('build.xml') { String oldTargetName ->
    switch (oldTargetName) {
        case 'clean':
            return 'antClean'
        case 'setup':
            return 'antSetup'
        case 'init':
            return 'antInit'
        case 'install.source':
            return 'antInstall'
        case 'war':
            return 'antWar'
        default:
            return oldTargetName
    }
}
/** war coinfiguration */
war {
    from 'WebContent'
}

/** Expand the core from the dependency */
task expandCore(type: Copy) {
    def extractDir = "${project.projectDir}"

    dependsOn configurations.coreDep
    from {
        configurations.coreDep.collect {
            zipTree(it)
        }
    }
    into extractDir
}

/** Expand modules from the dependencies */
task expandModules(type: Copy) {
    def extractDir = "${project.projectDir}/modules"
    dependsOn configurations.moduleDeps
    from {
        configurations.moduleDeps.collect {
            zipTree(it)
        }
    }
    into extractDir
}



/** Copy Openbravo.properties template and set values */
task prepareConfig(type: Copy){
    from file("config/Openbravo.properties.template")
    into file("config")
    rename { String fileName ->
        fileName.replace("Openbravo.properties.template", "Openbravo.properties")
    }
    doLast{
        ant.propertyfile(file: "config/Openbravo.properties") {
            entry( key: "context.name", value: findProperty("context.name"))
            entry( key: "bbdd.sid", value: findProperty("bbdd.sid"))
            entry( key: "bbdd.url", value: "jdbc:postgresql://localhost:"+findProperty("bbdd.port"))
            entry( key: "bbdd.systemUser", value: findProperty("bbdd.systemUser"))
            entry( key: "bbdd.systemPassword", value: findProperty("bbdd.systemPassword"))
            entry( key: "bbdd.user", value: findProperty("bbdd.user"))
            entry( key: "bbdd.password", value: findProperty("bbdd.password"))
        }
    }
}

/** Expand core and modules from the dependencies and set properties */
task expand{
    dependsOn expandCore
    dependsOn expandModules
    tasks.findByName('expandModules').mustRunAfter 'expandCore'
    finalizedBy prepareConfig
}

/** Call ant setup to prepare enviroment */
task setup {
    ant.properties['nonInteractive'] = true
    ant.properties['acceptLicense'] = true
    finalizedBy antSetup
}

/** The install.source ant task now depends on ant setup */
task install{
    dependsOn setup
    finalizedBy antInstall
}


